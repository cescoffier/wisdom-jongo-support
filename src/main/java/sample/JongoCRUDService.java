//TODO it seems to me you can only delete odjectids in jongo, even if jongo lets you manualy create ids of a differnt type
package sample;

import com.mongodb.DB;
import com.mongodb.WriteResult;
import org.bson.types.ObjectId;
import org.jongo.Jongo;
import org.jongo.MongoCollection;
import org.jongo.MongoCursor;
import org.wisdom.api.model.*;

import java.util.concurrent.Callable;


/**
 * Created by jennifer on 3/20/15.
 */
public class JongoCRUDService<T> implements JongoCRUD<T> {

    private final DB db;
    private final Class<T> entityClass;
    private final MongoCollection collection;
    private final Jongo jongo;

    public JongoCRUDService(Class<T> clazz, DB db) {
        this.db = db;
        this.entityClass = clazz;
        //should call get data store?
        jongo = new Jongo(db);
        collection = jongo.getCollection(entityClass.getName());
    }

    /**
     * Gets the entity class that is using the database.
     *
     * @return the class.
     */
    @Override
    public Class<T> getEntityClass() {
        return entityClass;
    }

    /**
     * Get the type of the Id of the entity.
     * The id should be auto generated by Jongo using the annotation @objectId with a field name of _id.
     *
     * @return type String.
     */
    @Override
    public Class<String> getIdClass() {
        return String.class;
    }

    @Override
    public Jongo getJongoDataStore() {
        return new Jongo(db);
    }

    /**
     * Save a new copy of the entity in the database if it doesnt not already exist. If the entity already exsists
     * (i.e the same ID number) then it should update the existing copy.
     *
     * @param o the entity to save.
     * @return the updated entity with an id number.
     */
    @Override
    public T save(T o) {
        WriteResult result = collection.save(o);
        if (result.getError() != null) {
            throw new RuntimeException("Cannot save instance " + o + " in " + collection.getName() + " : " + result.getLastError());
        } else {
            return o;
        }
    }


    @Override
    public Iterable<T> save(Iterable<T> iterable) {
        return null;
    }

    /**
     * Find an object from the database by it's unique Id number.
     *
     * @param id the unique id of the object.
     * @return the object if it exsists, otherwise return null.
     */
    @Override
    public T findOne(String id) {
        try {
            return collection.findOne(new ObjectId(id)).as(entityClass);
        } catch (IllegalArgumentException e) {
            return null;
        }
    }

    @Override
    public T findOne(EntityFilter<T> tentityFilter) {
        for (T entity : findAll()) {
            if (tentityFilter.accept(entity)) {
                return entity;
            }
        }
        return null;

    }

    /**
     * Find all of the objects in a Mongo Collection.
     *
     * @return an iterable of the entity type.
     */
    @Override
    public Iterable<T> findAll() {
        return collection.find().as(entityClass);
    }

    @Override
    public Iterable<T> findAll(Iterable iterable) {
        return null;
    }

    @Override
    public Iterable findAll(EntityFilter entityFilter) {
        return null;
    }

    /**
     * Delete an object from the collection if it exists.
     *
     * @param id of the object you wish to delete for.
     *           If the id doesn't exist there is an IllegalArgumentException.
     */
    @Override
    public void delete(String id) {
        collection.remove(new ObjectId(id));
    }

    @Override
    public T delete(T o) {
        return null;
    }


    @Override
    public Iterable<T> delete(Iterable<T> iterable) {

        return null;
    }


    /**
     * Checks to see if the object exsists in the Mongo Collection based on its ID.
     * @param id of the object to search for.
     * @return true if found false if not found.
     */
    @Override
    public boolean exists(String id) {
        try {
            collection.findOne(new ObjectId(id)).as(entityClass);
            return true;
                    } catch (IllegalArgumentException e) {
            return false;
        }

    }


    /**
     * Count the number of objects that are of the entity type in a Mongo Collection.
     * @return count as type Long.
     */
    @Override
    public long count() {
        MongoCursor<T> cursor = collection.find().as(entityClass);
        return cursor.count();
    }

    /*--------------------------------------------------------------------------------------------*/
    @Override
    public Repository getRepository() {
        return null;
    }

    @Override
    public void executeTransactionalBlock(Runnable runnable) throws HasBeenRollBackException {

    }

    @Override
    public TransactionManager getTransactionManager() {
        return null;
    }

    @Override
    //used to be R
    public FluentTransaction<T>.Intermediate transaction(Callable callable) {
        return null;
    }

    @Override
    //used to be R
    public FluentTransaction<T> transaction() {
        return null;
    }

    @Override
    //used to be A
    public T executeTransactionalBlock(Callable callable) throws HasBeenRollBackException {
        return null;
    }
}
